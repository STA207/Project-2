library("AER")
library("foreign")
setwd("~/Desktop/STA 207/Project 2/Project 2 Github/Project-2")
star = read.spss("STAR_Students.sav",to.data.frame = TRUE)
View(star)
data = names(star) %in% c("g1tchid","g1classtype","g1schid","g1surban", "g1classsize", "g1mathss", "g1tgen","g1trace","g1thighdegree","g1tcareer","g1tyears","g1motivraw","g1selfconraw", "g2tchid","g2classtype","g2schid","g2surban", "g2classsize", "g2absent","g2mathss", "g2tgen","g2trace","g2thighdegree","g2tcareer","g2tyears","g2motivraw","g2selfconraw")
data = star[,data]
data = data[complete.cases(data),]
data1 = names(star) %in% c("g1tchid","g1classtype","g1schid","g1surban", "g1classsize","g1mathss", "g1tgen","g1trace","g1thighdegree","g1tcareer","g1tyears","g1motivraw","g1selfconraw")
data1 = star[,data1]
data1 = data1[complete.cases(data1),]
data2 = names(star) %in% c("g2tchid","g2classtype","g2schid","g2surban", "g2classsize", "g2absent","g2mathss", "g2tgen","g2trace","g2thighdegree","g2tcareer","g2tyears","g2motivraw","g2selfconraw")
data2 = star[,data2]
data2 = data2[complete.cases(data2),]
#Write Report
Teach_as_Unit <- read.csv("~/Desktop/STA 207/Project 2/Project 2 Github/Project-2/Teach_as_Unit.csv")
View(Teach_as_Unit)
knitr::opts_chunk$set(echo=FALSE,message=FALSE,warning=FALSE)
t_data1 = Teach_as_Unit
reg1 = lm(g1_medmath ~ g1_classtype + g1_schoolID,
data = t_data1)
med_anova = aov(g1_medmath ~ g1_classtype + g1_schoolID,
data = t_data1)
plot(med_anova, which = c(2))
reg1 = lm(g1_medmath ~ as.factor(g1_classtype) + as.factor(g1_schoolID),
data = t_data1)
med_anova = aov(g1_medmath ~ as.factor(g1_classtype) + as.factor(g1_schoolID),
data = t_data1)
plot(med_anova, which = c(2))
hist(reg1$residuals, main = "Histogram of Residuals", xlab = "Residual Values")
str(t_data1)
t_data1$g1_schoolID = as.factor(t_data1$g1_schoolID)
str(t_data1)
reg1 = lm(g1_medmath ~ g1_classtype + g1_schoolID,
data = t_data1)
med_anova = aov(g1_medmath ~ as.factor(g1_classtype) + as.factor(g1_schoolID),
data = t_data1)
plot(med_anova, which = c(2))
shapiro.test(reg1$residuals)
plot(med_anova, which = c(1))
leveneTest(g1_medmath~g1_classtype, data = t_data1)
leveneTest(g1_medmath~g1_classtype+g1_schoolID, data = t_data1)
leveneTest(g1_medmath~g1_classtype, data = t_data1)
leveneTest(g1_medmath~g1_schoolID, data = t_data1)
library("AER")
library("foreign")
library("car")
levene.test(g1_medmath~g1_classtype+g1_schoolID, data = t_data1)
leveneTest(g1_medmath~g1_classtype+g1_schoolID, data = t_data1)
which(studres(reg1)>3 | studres(reg1)< -3)
library("AER")
library("foreign")
library("car")
library("MASS")
which(studres(reg1)>3 | studres(reg1)< -3)
length(which(studres(reg1)>3 | studres(reg1)< -3))
install.packages("kableExtra")
knitr::opts_chunk$set(echo=FALSE,message=FALSE,warning=FALSE)
library("AER")
library("foreign")
library("car")
library("MASS")
library("kableExtra")
Teach_as_Unit <- read.csv("~/Desktop/STA 207/Project 2/Project 2 Github/Project-2/Teach_as_Unit.csv")
View(Teach_as_Unit)
library("AER")
library("foreign")
library("car")
library("MASS")
library("kableExtra")
setwd("~/Desktop/STA 207/Project 2/Project 2 Github/Project-2")
star = read.spss("STAR_Students.sav",to.data.frame = TRUE)
View(star)
data = names(star) %in% c("g1tchid","g1classtype","g1schid","g1surban", "g1classsize", "g1mathss", "g1tgen","g1trace","g1thighdegree","g1tcareer","g1tyears","g1motivraw","g1selfconraw", "g2tchid","g2classtype","g2schid","g2surban", "g2classsize", "g2absent","g2mathss", "g2tgen","g2trace","g2thighdegree","g2tcareer","g2tyears","g2motivraw","g2selfconraw")
data = star[,data]
data = data[complete.cases(data),]
data1 = names(star) %in% c("g1tchid","g1classtype","g1schid","g1surban", "g1classsize","g1mathss", "g1tgen","g1trace","g1thighdegree","g1tcareer","g1tyears","g1motivraw","g1selfconraw")
data1 = star[,data1]
data1 = data1[complete.cases(data1),]
data2 = names(star) %in% c("g2tchid","g2classtype","g2schid","g2surban", "g2classsize", "g2absent","g2mathss", "g2tgen","g2trace","g2thighdegree","g2tcareer","g2tyears","g2motivraw","g2selfconraw")
data2 = star[,data2]
data2 = data2[complete.cases(data2),]
#Write Report
Teach_as_Unit <- read.csv("~/Desktop/STA 207/Project 2/Project 2 Github/Project-2/Teach_as_Unit.csv")
t_data1 = Teach_as_Unit
t_data1$g1_schoolID = as.factor(t_data1$g1_schoolID)
reg1 = lm(g1_medmath ~ g1_classtype + g1_schoolID,
data = t_data1)
med_anova = aov(g1_medmath ~ as.factor(g1_classtype) + as.factor(g1_schoolID),
data = t_data1)
plot(med_anova, which = c(2))
hist(reg1$residuals, main = "Histogram of Residuals", xlab = "Residual Values")
shapiro.test(reg1$residuals)
plot(med_anova, which = c(1))
leveneTest(g1_medmath~g1_classtype, data = t_data1)
leveneTest(g1_medmath~g1_schoolID, data = t_data1)
which(studres(reg1)>3 | studres(reg1)< -3)
length(which(studres(reg1)>3 | studres(reg1)< -3))
round(shapiro.test(reg1$residuals), 2)
str(shapiro.test)
str(shapiro.test((reg1$residuals))
str(shapiro.test((reg1$residuals)))
round(shapiro.test(reg1$residuals)$p.value, 2)
a = round(shapiro.test(reg1$residuals)$statistic, 2)
b = round(shapiro.test(reg1$residuals)$p.value, 2)
= round(shapiro.test(reg1$residuals)$statistic, 2)
a = round(shapiro.test(reg1$residuals)$statistic, 2)
round(shapiro.test(reg1$residuals)$statistic, 2)
W.statistic = round(shapiro.test(reg1$residuals)$statistic, 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test") %>% kable_styling(bootstrap_options = "striped", full_width = F)
round(shapiro.test(reg1$residuals)$p.value, 2)
round(shapiro.test(reg1$residuals)$statistic, 2)
names(shapiro.test(reg1$residuals)$statistic)
names(shapiro.test(reg1$residuals)$statistic)
frequency(shapiro.test(reg1$residuals)$statistic)
table(shapiro.test(reg1$residuals)$statistic)
str(table(shapiro.test(reg1$residuals)$statistic))
table(shapiro.test(reg1$residuals)$statistic)$
table(shapiro.test(reg1$residuals)$statistic)
names(table(shapiro.test(reg1$residuals)$statistic))
round(names(table(shapiro.test(reg1$residuals)$statistic)), 2)
as.numeric(names(table(shapiro.test(reg1$residuals)$statistic)))
round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
W.statistic = round(shapiro.test(reg1$residuals)$statistic, 2)
P.value = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test") %>% kable_styling(bootstrap_options = "striped", full_width = F)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value), 2)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test") %>% kable_styling(bootstrap_options = "striped", full_width = F)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test for Residuals") %>% kable_styling(bootstrap_options = "striped", full_width = F)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test for the Residuals") %>% kable_styling(bootstrap_options = "striped", full_width = F)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test for the Residuals") %>% kable_styling(bootstrap_options = "striped", full_width = F)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test") %>% kable_styling(bootstrap_options = "striped", full_width = F)
str(leveneTest(g1_medmath~g1_classtype, data = t_data1))
leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df
leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = leveneTest(g1_medmath~g1_classtype, data = t_data1)$F.value
leveneTest(g1_medmath~g1_classtype, data = t_data1)$F.value
leveneTest(g1_medmath~g1_classtype, data = t_data1)$F value
leveneTest(g1_medmath~g1_classtype, data = t_data1)$F
leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1]
leveneTest(g1_medmath~g1_classtype, data = t_data1)$P.value
leveneTest(g1_medmath~g1_classtype, data = t_data1)$P
leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1]
round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
e = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df
table1 = cbind(W., P.value)
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
e = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df
table1 = cbind(e, c, d)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for Class Type Variable") %>% kable_styling(bootstrap_options = "striped", full_width = F)
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
e = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df
table1 = cbind(a, c, d)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for Class Type Variable") %>% kable_styling(bootstrap_options = "striped", full_width = F)
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
paste(a, b, sep = ",")
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = paste(a, b, sep = ",")
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
e = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
table1 = cbind(a, d, e)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for Class Type Variable") %>% kable_styling(bootstrap_options = "striped", full_width = F)
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = paste(a, b, sep = ",")
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
e = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
table1 = cbind(c, d, e)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for Class Type Variable") %>% kable_styling(bootstrap_options = "striped", full_width = F)
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
paste(a, b, sep = " , ")
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
paste(a, b, sep = ", ")
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = paste(a, b, sep = ", ")
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
e = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
table1 = cbind(c, d, e)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for Class Type Variable") %>% kable_styling(bootstrap_options = "striped", full_width = F)
a = leveneTest(g1_medmath~g1_schoolID, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_schoolID, data = t_data1)$Df[2]
c = paste(a, b, sep = ", ")
d = round(leveneTest(g1_medmath~g1_schoolID, data = t_data1)$F[1], 2)
e = round(leveneTest(g1_medmath~g1_schoolID, data = t_data1)$P[1], 2)
table1 = cbind(c, d, e)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for School ID Variable") %>% kable_styling(bootstrap_options = "striped", full_width = F)
plot(med_anova, which = c(1))
plot(med_anova, which = c(1), xlab = "Fitted Values")
plot(med_anova, which = c(1))
a = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_classtype, data = t_data1)$Df[2]
c = paste(a, b, sep = ", ")
d = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$F[1], 2)
e = round(leveneTest(g1_medmath~g1_classtype, data = t_data1)$P[1], 2)
table1 = cbind(c, d, e)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for Class Type Variable") %>% kable_styling(bootstrap_options = c("striped", "bordered"), full_width = F)
W.statistic = round(as.numeric(names(table(shapiro.test(reg1$residuals)$statistic))), 2)
P.value = round(shapiro.test(reg1$residuals)$p.value, 2)
table = cbind(W.statistic, P.value)
colnames(table) = c('W Statistic', 'P-Value')
kable(table, caption = "Shapiro-Wilk Normality Test") %>% kable_styling(bootstrap_options = c("striped", "bordered"), full_width = F)
a = leveneTest(g1_medmath~g1_schoolID, data = t_data1)$Df[1]
b = leveneTest(g1_medmath~g1_schoolID, data = t_data1)$Df[2]
c = paste(a, b, sep = ", ")
d = round(leveneTest(g1_medmath~g1_schoolID, data = t_data1)$F[1], 2)
e = round(leveneTest(g1_medmath~g1_schoolID, data = t_data1)$P[1], 2)
table1 = cbind(c, d, e)
colnames(table1) = c('df', 'F Value', 'Pr(>F)')
kable(table1, caption = "Levene Test for School ID Variable") %>% kable_styling(bootstrap_options = c("striped", "bordered"), full_width = F)
a = length(which(studres(reg1)>3 | studres(reg1)< -3))
b = which(studres(reg1)>3 | studres(reg1)< -3)
table2 = cbind(a, b)
colnames(table2) = c('Number of Outliers', 'Observation Numbers')
kable(table2, caption = "Outliers") %>% kable_styling(bootstrap_options = c("striped", "bordered"), full_width = F)
which(studres(reg1)>3 | studres(reg1)< -3)
length(which(studres(reg1)>3 | studres(reg1)< -3))
names(length(which(studres(reg1)>3 | studres(reg1)< -3)))
length(which(studres(reg1)>3 | studres(reg1)< -3))
length(which(studres(reg1)>3 | studres(reg1)< -3))[1]
length(which(studres(reg1)>3 | studres(reg1)< -3))
which(studres(reg1)>3 | studres(reg1)< -3)
which(studres(reg1)>3 | studres(reg1)< -3)
names(which(studres(reg1)>3 | studres(reg1)< -3))
a = length(which(studres(reg1)>3 | studres(reg1)< -3))
b = names(which(studres(reg1)>3 | studres(reg1)< -3))
table2 = cbind(a, b)
colnames(table2) = c('Number of Outliers', 'Observation Numbers')
kable(table2, caption = "Outliers") %>% kable_styling(bootstrap_options = c("striped", "bordered"), full_width = F)
